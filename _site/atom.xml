<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>DongLei's Blog</title>
 <link href="http://donglei.name/atom.xml" rel="self"/>
 <link href="http://donglei.name"/>
 <updated>2014-09-29T10:27:40+08:00</updated>
 <id>http://donglei.name</id>
 <author>
   <name>donglei</name>
 </author>

 
 <entry>
   <title>博客写作一周年记</title>
   <link href="http://donglei.name/2014/09/28/blog-one-year.html"/>
   <updated>2014-09-28T00:00:00+08:00</updated>
   <id>http://donglei.name/2014/09/28/blog-one-year</id>
   <content type="html">&lt;p&gt;这周收到了服务器运营商发的邮件，提示要交费了，也意味着这个博客到现在已经活了一年。且来盘点一下这一年写过的东西：&lt;/p&gt;

&lt;p&gt;算上这篇总结，这一年共写了40篇，大约有五六万字，并不多，离一周一篇的设想完成度只有80%左右。主要原因还是懶，像关于可视化，关于python在社会科学中应用还是有很多可写的，书评也应增加比重，《众病之王》就很值得写上一笔。“我们绝大多数人的问题，归结到最后，就是一懒，二拖，三不肯读书，如此而已。”&lt;/p&gt;

&lt;p&gt;文章总共阅读量大概二万多，每篇五六百，高的三千多，低的百十人。这些文字、图片汇入比特洪流中，不知最终会流向何处，又将何时湮灭。但毕竟有不少人从中取了一瓢，知足。&lt;/p&gt;

&lt;p&gt;囤东西大概是人的本能，小时候囤玩具、卡片，家里囤白菜萝卜、瓶瓶罐罐，穷人囤穷人的东西，富人收集字画古玩、汽车飞机，说到底也是囤。以前互联网不像现在这么发达的时候，我们喜欢囤电子资源，小到电子书，大到游戏、电影、软件，生怕出问题还刻成光盘存档，虽然可能存档后从未看上一眼，但这种拥有感足以让我们满足。&lt;/p&gt;

&lt;p&gt;互联网发达后，似乎人们不那么爱囤电子资源了，网上都有，还是最新版，可见让资源唾手可得的时候，也没必要囤积了，也没见过哪个哥们儿囤空气。但不知道老往云盘、邮箱存东西和各位想过没有，万一这个网站挂了怎么办？Google死后，你的邮件怎么办？腾讯死了之后你的朋友圈怎么办？还有一种可能是，万一他们没死，你先挂了，那你的微博、微信、游戏账号怎么办？碰巧如果你是个大V，一个账号还是值些银子的。据说有个公司专门做电子信息的遗产管理，大概是你注册个账号，把重要的电子遗产信息账号密码托管给他，这个网络会定期给你发个邮件，确认你还“活着”，哪一天如果你连续几次都没有回过邮件，他就认为你“挂了”，你之前托管的电子遗产就会被交付给你填写的继承人。&lt;/p&gt;

&lt;p&gt;技术的兴盛，把我们伺候的舒舒服服，连死后电子账号这种事儿都有人帮你想好了，但我们日常的烦恼似乎并未消减。所以接下来一年，可能除了科学技术知识学习外，须多观内心，以求不惑。&lt;/p&gt;

&lt;p&gt;2014年9月25日，和菜头微信上写了篇名叫《博客之死》的文章，列举了博客的死因：网民选择变多，值得看的博客少，没有占据入口，不能直接变现。刀刀致命，但我决定继续写下去。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Doves | 梁朝伟喂鸽子</title>
   <link href="http://donglei.name/2014/08/13/doves.html"/>
   <updated>2014-08-13T00:00:00+08:00</updated>
   <id>http://donglei.name/2014/08/13/doves</id>
   <content type="html">&lt;p&gt;最近有个好玩儿的事情，起因是这样的。网上有许多“恶搞”物理题目表述，比如这个：&lt;/p&gt;

&lt;p&gt;在一个烟雨蒙蒙的清晨，你站在窗前，感慨万千,曾经失落过，但一切的曾经代替不了现在的行走，活在当下，曾经终究不是未来，水一滴一滴从屋檐自由落下，你的思绪也随它荡漾开来，突然发现当它通过屋檐下高为1.4m的窗户时，用时0.2s，空气阻力不计，取g=10m/s2。求此窗户离屋檐的距离。&lt;/p&gt;

&lt;p&gt;我给Z同学出了几个后，被其反问了一个很有趣的问题：&lt;/p&gt;

&lt;p&gt;梁朝伟在伦敦喂鸽子，每头喂一个面包屑就会有两只鸽子争抢，抢到的概率均等。假设广场上有100只鸽子，每只鸽子吃一片面包屑需要一秒钟，累计吃十片面包屑就吃饱飞走了，没吃到的会一直抢，直到吃饱为止，但如果累计10次没抢到就累觉不爱飞走了。问梁朝伟需要至少准备多少面包屑，才能保证观看鸽子吃食的时间最长。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;理想情况下，100只鸽子各吃到9片，抢但没吃到9次，这时梁朝伟投喂了900片，接下来，每头喂一次就会有一直吃饱飞走，一只累计10次没吃到飞走，也就是在投喂50次就够了，共计950片。不过实际情况肯定要比这个少。&lt;/p&gt;

&lt;p&gt;不知道大家想没想到如何求解析解，我目前还没解出来，不过拿Python写了个小脚本求了下数值解，大概830-850多片就够了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    #!/usr/bin/env python
&quot;&quot;&quot;
Simulation of the dove model
&quot;&quot;&quot;
# -*- coding: utf-8 -*-

import random

doves = {}
alpha = 10

for i in range(100):
        doves[i] = [0,0] #每个鸽子有一个list，第一个存吃的次数，每二个存没抢到的次数

t = 1

while t &amp;lt; 10000 and len(doves) &amp;gt;= 2:
        a = random.sample(doves,2) #从dove中选两只出来

        doves[a[0]][0] += 1 #第一只得到吃的
        doves[a[1]][1] += 1 #第二只没得到吃的

        t += 1

    #如果一只鸽子累计得到10次或者没得到10次，就从总的中删除
        if doves[a[0]][0] &amp;gt;= alpha:
            del doves[a[0]]

        if doves[a[1]][1] &amp;gt;= alpha:
            del doves[a[1]]

print &quot;The total time is:&quot;, t 
print &quot;The last dove is:&quot;, doves
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 
</feed>
